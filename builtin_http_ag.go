// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package goja

import (
	"errors"
	"fmt"
)

const (
	// HCUrl is a HC of type url.
	HCUrl HC = "url"
	// HCMethod is a HC of type method.
	HCMethod HC = "method"
	// HCBaseUrl is a HC of type baseURL.
	HCBaseUrl HC = "baseURL"
	// HCHeaders is a HC of type headers.
	HCHeaders HC = "headers"
	// HCParams is a HC of type params.
	HCParams HC = "params"
	// HCData is a HC of type data.
	HCData HC = "data"
	// HCTimeout is a HC of type timeout.
	HCTimeout HC = "timeout"
	// HCResponseType is a HC of type responseType.
	HCResponseType HC = "responseType"
	// HCResponseEncoding is a HC of type responseEncoding.
	HCResponseEncoding HC = "responseEncoding"
)

var ErrInvalidHC = errors.New("not a valid HC")

var _HCNameMap = map[string]HC{
	"url":              HCUrl,
	"method":           HCMethod,
	"baseURL":          HCBaseUrl,
	"headers":          HCHeaders,
	"params":           HCParams,
	"data":             HCData,
	"timeout":          HCTimeout,
	"responseType":     HCResponseType,
	"responseEncoding": HCResponseEncoding,
}

// Name is the attribute of HC.
func (x HC) Name() string {
	if v, ok := _HCNameMap[string(x)]; ok {
		return string(v)
	}
	return fmt.Sprintf("HC(%s).Name", string(x))
}

// Val is the attribute of HC.
func (x HC) Val() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x HC) IsValid() bool {
	_, ok := _HCNameMap[string(x)]
	return ok
}

// String implements the Stringer interface.
func (x HC) String() string {
	return x.Name()
}

// ParseHC converts a string to a HC.
func ParseHC(value string) (HC, error) {
	if x, ok := _HCNameMap[value]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", value, ErrInvalidHC)
}
